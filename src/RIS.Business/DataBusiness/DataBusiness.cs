#region

using System.Data.Entity;
using System.IO;
using System.Linq;
using RIS.Data;
using RIS.Data.Migrations;

#endregion

namespace RIS.Business
{
    public partial class DataBusiness : IBusiness
    {
        public void CheckConnection()
        {
            using (var _databaseContext = new DatabaseContext())
            {
                //Migrate database V6 to V7
                var _oldDatabasePath = @"C:\ProgramData\RIS\RISv6-DB.sdf";
                if (File.Exists(_oldDatabasePath) && !File.Exists(_databaseContext.Database.Connection.Database))
                {
                    //Copy old db to new name for backup
                    File.Copy(_oldDatabasePath, _databaseContext.Database.Connection.Database);
                    //Delete __MigrationHistory table
                    _databaseContext.Database.ExecuteSqlCommand(@"DELETE FROM [__MigrationHistory];");
                    //Add migration script 201401251404348_InitialCreate because db already exists
                    _databaseContext.Database.ExecuteSqlCommand(
                        @"INSERT INTO [__MigrationHistory] ([MigrationId],[ContextKey],[Model],[ProductVersion]) VALUES (N'201401251404348_InitialCreate',N'RIS.Data.Migrations.Configuration',

                    //Enalbe and execute migration to latest version 
                    Database.SetInitializer(new MigrateDatabaseToLatestVersion<DatabaseContext, Configuration>());
                    _databaseContext.Database.Initialize(true);

                    //Reseed all tables
                    if (_databaseContext.Aaos.Count() > 0)
                    {
                        var _maxIdAaos = _databaseContext.Aaos.Max(f => f.Id);
                        if (_databaseContext.Aaos.Count() > _maxIdAaos) _maxIdAaos = _databaseContext.Aaos.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Aaos] ALTER COLUMN [Id] IDENTITY ({_maxIdAaos + 1}, 1)");
                    }

                    if (_databaseContext.AlarmappGroups.Count() > 0)
                    {
                        var _maxIdAlarmappGroups = _databaseContext.AlarmappGroups.Max(f => f.Id);
                        if (_databaseContext.AlarmappGroups.Count() > _maxIdAlarmappGroups)
                            _maxIdAlarmappGroups = _databaseContext.AlarmappGroups.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [AlarmappGroups] ALTER COLUMN [Id] IDENTITY ({_maxIdAlarmappGroups + 1}, 1)");
                    }

                    if (_databaseContext.Amss.Count() > 0)
                    {
                        var _maxIdAms = _databaseContext.Amss.Max(f => f.Id);
                        if (_databaseContext.Amss.Count() > _maxIdAms) _maxIdAms = _databaseContext.Amss.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Ams] ALTER COLUMN [Id] IDENTITY ({_maxIdAms + 1}, 1)");
                    }

                    if (_databaseContext.Fileprints.Count() > 0)
                    {
                        var _maxIdFileprints = _databaseContext.Fileprints.Max(f => f.Id);
                        if (_databaseContext.Fileprints.Count() > _maxIdFileprints)
                            _maxIdFileprints = _databaseContext.Fileprints.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Fileprints] ALTER COLUMN [Id] IDENTITY ({_maxIdFileprints + 1}, 1)");
                    }

                    if (_databaseContext.Filters.Count() > 0)
                    {
                        var _maxIdFilters = _databaseContext.Filters.Max(f => f.Id);
                        if (_databaseContext.Filters.Count() > _maxIdFilters)
                            _maxIdFilters = _databaseContext.Filters.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Filters] ALTER COLUMN [Id] IDENTITY ({_maxIdFilters + 1}, 1)");
                    }

                    if (_databaseContext.Pagers.Count() > 0)
                    {
                        var _maxIdPagers = _databaseContext.Pagers.Max(f => f.Id);
                        if (_databaseContext.Pagers.Count() > _maxIdPagers)
                            _maxIdPagers = _databaseContext.Pagers.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Pagers] ALTER COLUMN [Id] IDENTITY ({_maxIdPagers + 1}, 1)");
                    }

                    if (_databaseContext.Printers.Count() > 0)
                    {
                        var _maxIdPrinters = _databaseContext.Printers.Max(f => f.Id);
                        if (_databaseContext.Printers.Count() > _maxIdPrinters)
                            _maxIdPrinters = _databaseContext.Printers.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Printers] ALTER COLUMN [Id] IDENTITY ({_maxIdPrinters + 1}, 1)");
                    }

                    if (_databaseContext.Users.Count() > 0)
                    {
                        var _maxIdUsers = _databaseContext.Users.Max(f => f.Id);
                        if (_databaseContext.Users.Count() > _maxIdUsers) _maxIdUsers = _databaseContext.Users.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Users] ALTER COLUMN [Id] IDENTITY ({_maxIdUsers + 1}, 1)");
                    }

                    if (_databaseContext.Vehicles.Count() > 0)
                    {
                        var _maxIdVehicles = _databaseContext.Vehicles.Max(f => f.Id);
                        if (_databaseContext.Vehicles.Count() > _maxIdVehicles)
                            _maxIdVehicles = _databaseContext.Vehicles.Count();

                        _databaseContext.Database.ExecuteSqlCommand(
                            $"ALTER TABLE [Vehicles] ALTER COLUMN [Id] IDENTITY ({_maxIdVehicles + 1}, 1)");
                    }
                }
                else
                {
                    //Enalbe migration to latest version 
                    Database.SetInitializer(new MigrateDatabaseToLatestVersion<DatabaseContext, Configuration>());
                }

                //Check Connection
                _databaseContext.CheckConnection();
            }
        }
    }
}